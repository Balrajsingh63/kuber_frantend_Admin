{"ast":null,"code":"import { createStore, applyMiddleware } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { rootReducer } from \"../rootReducer/reducers\"; // Assuming this is the combined root reducer\n\nfunction logger() {\n  return next => action => {\n    const returnValue = next(action);\n    return returnValue;\n  };\n}\n// Configuration for Redux Persist\nconst persistConfig = {\n  key: \"root\",\n  storage: AsyncStorage,\n  whitelist: [\"authReducer\"] // Reducers to persist\n};\n\n// Persist the combined reducer configuration\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Create the Redux store with persisted reducers and apply middleware\nexport const Store = createStore(persistedReducer, applyMiddleware(logger));\nexport const persistor = persistStore(Store);","map":{"version":3,"names":["createStore","applyMiddleware","persistStore","persistReducer","AsyncStorage","rootReducer","logger","next","action","returnValue","persistConfig","key","storage","whitelist","persistedReducer","Store","persistor"],"sources":["/Users/vakeelsingh/Desktop/projects/argon-dashboard-react-master/src/redux/store/store.js"],"sourcesContent":["import { createStore, applyMiddleware } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { rootReducer } from \"../rootReducer/reducers\"; // Assuming this is the combined root reducer\n\nfunction logger() {\n  return (next) => (action) => {\n    const returnValue = next(action);\n    return returnValue;\n  };\n}\n// Configuration for Redux Persist\nconst persistConfig = {\n  key: \"root\",\n  storage: AsyncStorage,\n  whitelist: [\"authReducer\"], // Reducers to persist\n};\n\n// Persist the combined reducer configuration\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Create the Redux store with persisted reducers and apply middleware\nexport const Store = createStore(persistedReducer, applyMiddleware(logger));\nexport const persistor = persistStore(Store);\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,QAAQ,kBAAkB;AAC/D,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,WAAW,QAAQ,yBAAyB,CAAC,CAAC;;AAEvD,SAASC,MAAMA,CAAA,EAAG;EAChB,OAAQC,IAAI,IAAMC,MAAM,IAAK;IAC3B,MAAMC,WAAW,GAAGF,IAAI,CAACC,MAAM,CAAC;IAChC,OAAOC,WAAW;EACpB,CAAC;AACH;AACA;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAER,YAAY;EACrBS,SAAS,EAAE,CAAC,aAAa,CAAC,CAAE;AAC9B,CAAC;;AAED;AACA,MAAMC,gBAAgB,GAAGX,cAAc,CAACO,aAAa,EAAEL,WAAW,CAAC;;AAEnE;AACA,OAAO,MAAMU,KAAK,GAAGf,WAAW,CAACc,gBAAgB,EAAEb,eAAe,CAACK,MAAM,CAAC,CAAC;AAC3E,OAAO,MAAMU,SAAS,GAAGd,YAAY,CAACa,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}